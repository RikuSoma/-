using System; using UnityEngine;  public abstract class PlayerShooting : IPlayerState {     private Player player;     private PlayerStateMachine playerStateMachine;     protected Shooting shooting; // 弾の発射処理クラス      protected float shootTimer = 0f;     protected float shootInterval = 0.15f;     public Vector3 shootingDirection = Vector3.zero;      private bool wasGroundedLastFrame = true;      // 弾種切り替え     private PlayerShooting ShootingMode;     private static int currentModeIndex = 0;     private static readonly Type[] shootingModes = new Type[]     {         typeof(NohMaskState),         typeof(DemonState),         typeof(FoxState)     };      public static event Action<Type> OnShootingModeChanged;      public virtual void Init(Player player, PlayerStateMachine playerStateMachine)     {         this.player = player;         this.playerStateMachine = playerStateMachine;         this.shooting = player.GetComponent<Shooting>();          shootTimer = 0f;          if (shootingDirection == Vector3.zero)         {             shootingDirection = new Vector3(1, 0, 0);         }     }      public virtual void HandleInput()     {         HandleDirectionInput();         HandleModeSwitch();     }      private void HandleDirectionInput()     {         Vector2 input = playerStateMachine.ShootDirectionInput;          Vector3 direction = new Vector3(input.x, input.y, 0f);           //// 空中以外では下方向を禁止         //if (!wasGroundedLastFrame && player.IsGrounded())         //{         //    if (Input.GetKey(KeyCode.S)) { shootingDirection = Vector3.left; }         //}          if (player.IsGrounded() && direction.y < 0f)         {             direction.y = 0f;         }          if (direction != Vector3.zero)         {             shootingDirection = direction.normalized;         }      }      private void HandleModeSwitch()     {         if (playerStateMachine.SwitchModePressed)         {             playerStateMachine.DeactivateState(this);              currentModeIndex = (currentModeIndex + 1) % shootingModes.Length;             ShootingMode = (PlayerShooting)Activator.CreateInstance(shootingModes[currentModeIndex]);              ShootingMode.shootingDirection = this.shootingDirection;             playerStateMachine.ActivateState(ShootingMode);              OnShootingModeChanged?.Invoke(shootingModes[currentModeIndex]);              Debug.Log("Switched to shooting mode: " + shootingModes[currentModeIndex].Name);         }     }      public virtual void Update()     {         shootTimer += Time.deltaTime;         wasGroundedLastFrame = player.IsGrounded();          if (playerStateMachine.FireHeld && shootTimer >= shootInterval && !playerStateMachine.DashPressed)         {             Fire();             shootTimer = 0f;         }     }      public void SetShootInterval(float Interval)     {         shootInterval = Interval;     }      public float GetShootInterval() => shootInterval;       protected abstract void Fire();      public virtual void Remove() { }      public PlayerShooting GetShootingMode() => ShootingMode;  }